Git
Study Guide

1 Versa what?!

What is version control?

Version control records changes made to a file or group of files over time so that one may easily view or use specific versions at a later date. A common type of version control that some may be familiar with is the "file history" feature of Windows, in which the Windows OS tracks changes to specific files which can be restored at a later date, even if the file itself is deleted or damaged beyond recognition.

2 Where the heart is

What is the difference between distributed and centralized version control
systems?

In distributed version control systems, every developer has a full local copy of the repository, allowing clients to restore a server by uploading their own backup clone. In a centralized version control system, checkouts are done on a per file basis rather than as a full repository. 

3 Versa who?!

What does a version control program do for us?

A version control program manages and records the versions of the files on our project, automating many aspects of a versioning system to make working with version control easier and less time-consuming. This allows a developer to spend more time working with code and less time working inside a file system.

4 Committing to git

What is a commit?

A commit is a command used by git that will record the snapshots of the files being tracked and added to the commit. This creates a version history of the file for that commit and allows us to pull that file or view its changes later on if the need arises.

5 Checking out git

What is a check out?

checkout allows you to switch branches or pull files or commits from the history and otherwise mess with the timeline (dangerous!)

6 Itâ€™s like a tree limb

What is a branch?

7 The life of a limb

How long are branches in git supposed to exist?

8 Tree growth

How do you create a branch in git?

9 Swinging on a vine

How do you switch branches in git?

10 Taping it together

How do you merge branches in git?

11 Status

How do you check the status of the files you are presently working on?

12 Adding to the chaos

How do you add files to the repository?

13 The main line

What is the name for the primary branch in git?

14 What limb are you on?

How do you check which branch you presently have checked out?

15 Git what?!

What is github?

16 We see a need!

Why was git created?

17 A day in the life of git

What is a typical git workflow?

18 Why git?

What makes git different than other version control systems?

19 What were they thinking?!

What were the design criteria for git?

20 Time machine

How do we view the past of a project with git?

21 Commit Comment

How much information, and what kind of information should be in a commit
message?

22 Great Scott!

If there was a mistake made in the past of a project, how should we go about
correcting that mistake?

