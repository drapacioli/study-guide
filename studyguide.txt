Git
Study Guide

1 Versa what?!

What is version control?

Version control records changes made to a file or group of files over time so that one may easily view or use specific versions at a later date. A common type of version control that some may be familiar with is the "file history" feature of Windows, in which the Windows OS tracks changes to specific files which can be restored at a later date, even if the file itself is deleted or damaged beyond recognition.

2 Where the heart is

What is the difference between distributed and centralized version control
systems?

In distributed version control systems, every developer has a full local copy of the repository, allowing clients to restore a server by uploading their own backup clone. In a centralized version control system, checkouts are done on a per file basis rather than as a full repository. 

3 Versa who?!

What does a version control program do for us?

A version control program manages and records the versions of the files on our project, automating many aspects of a versioning system to make working with version control easier and less time-consuming. This allows a developer to spend more time working with code and less time working inside a file system.

4 Committing to git

What is a commit?

A commit is a command used by git that will record the snapshots of the files being tracked and added to the commit. This creates a version history of the file for that commit and allows us to pull that file or view its changes later on if the need arises.

5 Checking out git

What is a check out?

checkout allows you to switch branches or pull files or commits from the history and otherwise mess with the timeline (dangerous!)

6 Itâ€™s like a tree limb

What is a branch?

A branch is a separate set of files in the repository for modifying files without affecting the other branches or the master file. It functions similarly to a pointer in many programming languages, except no weird memory allocation issues tend to appear when you don't know what you're doing. 

7 The life of a limb

How long are branches in git supposed to exist?

Until you are ready to merge and delete it. Without user interaction...for as long as the project remains in existence.

8 Tree growth

How do you create a branch in git?

git branch $BRANCH_NAME

Where $BRANCH_NAME is the name of the branch to be created.

9 Swinging on a vine

How do you switch branches in git?

git checkout $BRANCH_NAME

where $BRANCH_NAME is the name of the branch you wish to switch to

10 Taping it together

How do you merge branches in git?

git merge $BRANCH_NAME

where $BRANCH_NAME is the name of the branch you wish to merge.

(You may then optionally delete the branch if you no longer need it)

11 Status

How do you check the status of the files you are presently working on?

git status

12 Adding to the chaos

How do you add files to the repository?

git add $FILENAME

where $FILENAME is the name of the file you wish to add to the repository

(Alternatively, if you wish to add all files in the directory to the repository, you can use "git add ." or "git add --all")

13 The main line

What is the name for the primary branch in git?

master

14 What limb are you on?

How do you check which branch you presently have checked out?

git branch

15 Git what?!

What is github?

It is a web-based git repository that can function as a host to a git project or even as a way to edit and work on git projects that you or some developer you work with to have access to.

16 We see a need!

Why was git created?

Because several people decided there was a need for it that existing source control management didn't satisfy, and had the time to create it. Specifically, a group of linux kernel developers wanted a distributed system with a very light resource load and no expensive subscription or purchase costs.

17 A day in the life of git

What is a typical git workflow?

A typical git workflow varies per person, company, or team, but in most cases a person or group works on a mirror copy of the repository on their local machine, creates local commits, tests their software (either in the main or a different branch) then pushes their branch to the central repository when they are satisfied with their work. 

I also strongly suspect that there are plenty of moments where developers decide to discard changes by pulling an old version of a file or files when they realize they made a mistake, but of course everyone is a good developer and they always move forward and don't delete their mistakes from the system, right?

18 Why git?

What makes git different than other version control systems?

Git is 100% free, distributed, and widely used by many developers. Because of its wide use and easy access, it has become the de facto standard of source code management software. 

19 What were they thinking?!

What were the design criteria for git?

20 Time machine

How do we view the past of a project with git?

21 Commit Comment

How much information, and what kind of information should be in a commit
message?

22 Great Scott!

If there was a mistake made in the past of a project, how should we go about
correcting that mistake?

